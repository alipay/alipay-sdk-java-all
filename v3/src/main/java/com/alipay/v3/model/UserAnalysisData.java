/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2024-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * UserAnalysisData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UserAnalysisData {
  public static final String SERIALIZED_NAME_CANCEL_USER_CNT = "cancel_user_cnt";
  @SerializedName(SERIALIZED_NAME_CANCEL_USER_CNT)
  private String cancelUserCnt;

  public static final String SERIALIZED_NAME_CUMULATE_USER_CNT = "cumulate_user_cnt";
  @SerializedName(SERIALIZED_NAME_CUMULATE_USER_CNT)
  private String cumulateUserCnt;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_GROW_USER_CNT = "grow_user_cnt";
  @SerializedName(SERIALIZED_NAME_GROW_USER_CNT)
  private String growUserCnt;

  public static final String SERIALIZED_NAME_NEW_USER_CNT = "new_user_cnt";
  @SerializedName(SERIALIZED_NAME_NEW_USER_CNT)
  private String newUserCnt;

  public UserAnalysisData() { 
  }

  public UserAnalysisData cancelUserCnt(String cancelUserCnt) {
    
    this.cancelUserCnt = cancelUserCnt;
    return this;
  }

   /**
   * 取消关注人数
   * @return cancelUserCnt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "40", value = "取消关注人数")

  public String getCancelUserCnt() {
    return cancelUserCnt;
  }


  public void setCancelUserCnt(String cancelUserCnt) {
    this.cancelUserCnt = cancelUserCnt;
  }


  public UserAnalysisData cumulateUserCnt(String cumulateUserCnt) {
    
    this.cumulateUserCnt = cumulateUserCnt;
    return this;
  }

   /**
   * 累积关注人数
   * @return cumulateUserCnt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60", value = "累积关注人数")

  public String getCumulateUserCnt() {
    return cumulateUserCnt;
  }


  public void setCumulateUserCnt(String cumulateUserCnt) {
    this.cumulateUserCnt = cumulateUserCnt;
  }


  public UserAnalysisData date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * 日期
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20171101", value = "日期")

  public String getDate() {
    return date;
  }


  public void setDate(String date) {
    this.date = date;
  }


  public UserAnalysisData growUserCnt(String growUserCnt) {
    
    this.growUserCnt = growUserCnt;
    return this;
  }

   /**
   * 净增关注人数
   * @return growUserCnt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "净增关注人数")

  public String getGrowUserCnt() {
    return growUserCnt;
  }


  public void setGrowUserCnt(String growUserCnt) {
    this.growUserCnt = growUserCnt;
  }


  public UserAnalysisData newUserCnt(String newUserCnt) {
    
    this.newUserCnt = newUserCnt;
    return this;
  }

   /**
   * 新关注人数
   * @return newUserCnt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30", value = "新关注人数")

  public String getNewUserCnt() {
    return newUserCnt;
  }


  public void setNewUserCnt(String newUserCnt) {
    this.newUserCnt = newUserCnt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAnalysisData userAnalysisData = (UserAnalysisData) o;
    return Objects.equals(this.cancelUserCnt, userAnalysisData.cancelUserCnt) &&
        Objects.equals(this.cumulateUserCnt, userAnalysisData.cumulateUserCnt) &&
        Objects.equals(this.date, userAnalysisData.date) &&
        Objects.equals(this.growUserCnt, userAnalysisData.growUserCnt) &&
        Objects.equals(this.newUserCnt, userAnalysisData.newUserCnt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelUserCnt, cumulateUserCnt, date, growUserCnt, newUserCnt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAnalysisData {\n");
    sb.append("    cancelUserCnt: ").append(toIndentedString(cancelUserCnt)).append("\n");
    sb.append("    cumulateUserCnt: ").append(toIndentedString(cumulateUserCnt)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    growUserCnt: ").append(toIndentedString(growUserCnt)).append("\n");
    sb.append("    newUserCnt: ").append(toIndentedString(newUserCnt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancel_user_cnt");
    openapiFields.add("cumulate_user_cnt");
    openapiFields.add("date");
    openapiFields.add("grow_user_cnt");
    openapiFields.add("new_user_cnt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserAnalysisData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (UserAnalysisData.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserAnalysisData is not found in the empty JSON string", UserAnalysisData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserAnalysisData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserAnalysisData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("cancel_user_cnt") != null && !jsonObj.get("cancel_user_cnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancel_user_cnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancel_user_cnt").toString()));
      }
      if (jsonObj.get("cumulate_user_cnt") != null && !jsonObj.get("cumulate_user_cnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulate_user_cnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulate_user_cnt").toString()));
      }
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (jsonObj.get("grow_user_cnt") != null && !jsonObj.get("grow_user_cnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grow_user_cnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grow_user_cnt").toString()));
      }
      if (jsonObj.get("new_user_cnt") != null && !jsonObj.get("new_user_cnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_user_cnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_user_cnt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserAnalysisData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserAnalysisData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserAnalysisData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserAnalysisData.class));

       return (TypeAdapter<T>) new TypeAdapter<UserAnalysisData>() {
           @Override
           public void write(JsonWriter out, UserAnalysisData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserAnalysisData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserAnalysisData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserAnalysisData
  * @throws IOException if the JSON string is invalid with respect to UserAnalysisData
  */
  public static UserAnalysisData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserAnalysisData.class);
  }

 /**
  * Convert an instance of UserAnalysisData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

