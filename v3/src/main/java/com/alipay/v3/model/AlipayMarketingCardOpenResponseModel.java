/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-06
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.alipay.v3.model.MerchantCard;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * AlipayMarketingCardOpenResponseModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AlipayMarketingCardOpenResponseModel {
  public static final String SERIALIZED_NAME_CARD_INFO = "card_info";
  @SerializedName(SERIALIZED_NAME_CARD_INFO)
  private MerchantCard cardInfo;

  public static final String SERIALIZED_NAME_OPEN_CARD_CHANNEL = "open_card_channel";
  @SerializedName(SERIALIZED_NAME_OPEN_CARD_CHANNEL)
  private String openCardChannel;

  public static final String SERIALIZED_NAME_OPEN_CARD_CHANNEL_ID = "open_card_channel_id";
  @SerializedName(SERIALIZED_NAME_OPEN_CARD_CHANNEL_ID)
  private String openCardChannelId;

  public AlipayMarketingCardOpenResponseModel() { 
  }

  public AlipayMarketingCardOpenResponseModel cardInfo(MerchantCard cardInfo) {
    
    this.cardInfo = cardInfo;
    return this;
  }

   /**
   * Get cardInfo
   * @return cardInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MerchantCard getCardInfo() {
    return cardInfo;
  }


  public void setCardInfo(MerchantCard cardInfo) {
    this.cardInfo = cardInfo;
  }


  public AlipayMarketingCardOpenResponseModel openCardChannel(String openCardChannel) {
    
    this.openCardChannel = openCardChannel;
    return this;
  }

   /**
   * 实际记录的领卡渠道（可能跟商户传入值不同）；  可直接标识领卡渠道，也可配合open_card_channel_id标识领卡渠道类型：  例如：  线下门店领取:20161534000000000008863（直接标识领卡渠道，门店shopId）  线下扫二维码领取:QR（标识领卡类型）;  线下活动领取:20170522000000000003609（直接标识领卡渠道，商户活动ID）
   * @return openCardChannel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20161534000000000008863", value = "实际记录的领卡渠道（可能跟商户传入值不同）；  可直接标识领卡渠道，也可配合open_card_channel_id标识领卡渠道类型：  例如：  线下门店领取:20161534000000000008863（直接标识领卡渠道，门店shopId）  线下扫二维码领取:QR（标识领卡类型）;  线下活动领取:20170522000000000003609（直接标识领卡渠道，商户活动ID）")

  public String getOpenCardChannel() {
    return openCardChannel;
  }


  public void setOpenCardChannel(String openCardChannel) {
    this.openCardChannel = openCardChannel;
  }


  public AlipayMarketingCardOpenResponseModel openCardChannelId(String openCardChannelId) {
    
    this.openCardChannelId = openCardChannelId;
    return this;
  }

   /**
   * 实际记录的领卡来源渠道id（可能跟商户传入值不同）；  区别于open_card_channel领卡渠道；  一般使用场景：  open_card_channel用于区分渠道类型，例如取值为\&quot;SHOP\&quot;（门店），\&quot;ACTIVITY\&quot;（活动）；  则open_card_channel_id可用于区分同渠道的不同实体，对应取各门店ID或各活动的标识ID等；
   * @return openCardChannelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123123123123", value = "实际记录的领卡来源渠道id（可能跟商户传入值不同）；  区别于open_card_channel领卡渠道；  一般使用场景：  open_card_channel用于区分渠道类型，例如取值为\"SHOP\"（门店），\"ACTIVITY\"（活动）；  则open_card_channel_id可用于区分同渠道的不同实体，对应取各门店ID或各活动的标识ID等；")

  public String getOpenCardChannelId() {
    return openCardChannelId;
  }


  public void setOpenCardChannelId(String openCardChannelId) {
    this.openCardChannelId = openCardChannelId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AlipayMarketingCardOpenResponseModel instance itself
   */
  public AlipayMarketingCardOpenResponseModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlipayMarketingCardOpenResponseModel alipayMarketingCardOpenResponseModel = (AlipayMarketingCardOpenResponseModel) o;
    return Objects.equals(this.cardInfo, alipayMarketingCardOpenResponseModel.cardInfo) &&
        Objects.equals(this.openCardChannel, alipayMarketingCardOpenResponseModel.openCardChannel) &&
        Objects.equals(this.openCardChannelId, alipayMarketingCardOpenResponseModel.openCardChannelId)&&
        Objects.equals(this.additionalProperties, alipayMarketingCardOpenResponseModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardInfo, openCardChannel, openCardChannelId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlipayMarketingCardOpenResponseModel {\n");
    sb.append("    cardInfo: ").append(toIndentedString(cardInfo)).append("\n");
    sb.append("    openCardChannel: ").append(toIndentedString(openCardChannel)).append("\n");
    sb.append("    openCardChannelId: ").append(toIndentedString(openCardChannelId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_info");
    openapiFields.add("open_card_channel");
    openapiFields.add("open_card_channel_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AlipayMarketingCardOpenResponseModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AlipayMarketingCardOpenResponseModel.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlipayMarketingCardOpenResponseModel is not found in the empty JSON string", AlipayMarketingCardOpenResponseModel.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `card_info`
      if (jsonObj.getAsJsonObject("card_info") != null) {
        MerchantCard.validateJsonObject(jsonObj.getAsJsonObject("card_info"));
      }
      if (jsonObj.get("open_card_channel") != null && !jsonObj.get("open_card_channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `open_card_channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("open_card_channel").toString()));
      }
      if (jsonObj.get("open_card_channel_id") != null && !jsonObj.get("open_card_channel_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `open_card_channel_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("open_card_channel_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlipayMarketingCardOpenResponseModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlipayMarketingCardOpenResponseModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlipayMarketingCardOpenResponseModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlipayMarketingCardOpenResponseModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AlipayMarketingCardOpenResponseModel>() {
           @Override
           public void write(JsonWriter out, AlipayMarketingCardOpenResponseModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AlipayMarketingCardOpenResponseModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AlipayMarketingCardOpenResponseModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlipayMarketingCardOpenResponseModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlipayMarketingCardOpenResponseModel
  * @throws IOException if the JSON string is invalid with respect to AlipayMarketingCardOpenResponseModel
  */
  public static AlipayMarketingCardOpenResponseModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlipayMarketingCardOpenResponseModel.class);
  }

 /**
  * Convert an instance of AlipayMarketingCardOpenResponseModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

