/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2024-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * OrderDataDistributeInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OrderDataDistributeInfo {
  public static final String SERIALIZED_NAME_NOT_DISTRIBUTE_REASON = "not_distribute_reason";
  @SerializedName(SERIALIZED_NAME_NOT_DISTRIBUTE_REASON)
  private String notDistributeReason;

  public static final String SERIALIZED_NAME_SCENE_CODE = "scene_code";
  @SerializedName(SERIALIZED_NAME_SCENE_CODE)
  private String sceneCode;

  public static final String SERIALIZED_NAME_SCENE_NAME = "scene_name";
  @SerializedName(SERIALIZED_NAME_SCENE_NAME)
  private String sceneName;

  public OrderDataDistributeInfo() { 
  }

  public OrderDataDistributeInfo notDistributeReason(String notDistributeReason) {
    
    this.notDistributeReason = notDistributeReason;
    return this;
  }

   /**
   * 未分发到场景的具体原因。开发者可根据具体原因定位解决问题后发起重试。
   * @return notDistributeReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "小程序id不存在", value = "未分发到场景的具体原因。开发者可根据具体原因定位解决问题后发起重试。")

  public String getNotDistributeReason() {
    return notDistributeReason;
  }


  public void setNotDistributeReason(String notDistributeReason) {
    this.notDistributeReason = notDistributeReason;
  }


  public OrderDataDistributeInfo sceneCode(String sceneCode) {
    
    this.sceneCode = sceneCode;
    return this;
  }

   /**
   * 分发场景code。
   * @return sceneCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SERVICE_MSG", value = "分发场景code。")

  public String getSceneCode() {
    return sceneCode;
  }


  public void setSceneCode(String sceneCode) {
    this.sceneCode = sceneCode;
  }


  public OrderDataDistributeInfo sceneName(String sceneName) {
    
    this.sceneName = sceneName;
    return this;
  }

   /**
   * 分发场景名，对应scene_code。
   * @return sceneName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "订单消息", value = "分发场景名，对应scene_code。")

  public String getSceneName() {
    return sceneName;
  }


  public void setSceneName(String sceneName) {
    this.sceneName = sceneName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDataDistributeInfo orderDataDistributeInfo = (OrderDataDistributeInfo) o;
    return Objects.equals(this.notDistributeReason, orderDataDistributeInfo.notDistributeReason) &&
        Objects.equals(this.sceneCode, orderDataDistributeInfo.sceneCode) &&
        Objects.equals(this.sceneName, orderDataDistributeInfo.sceneName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notDistributeReason, sceneCode, sceneName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDataDistributeInfo {\n");
    sb.append("    notDistributeReason: ").append(toIndentedString(notDistributeReason)).append("\n");
    sb.append("    sceneCode: ").append(toIndentedString(sceneCode)).append("\n");
    sb.append("    sceneName: ").append(toIndentedString(sceneName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("not_distribute_reason");
    openapiFields.add("scene_code");
    openapiFields.add("scene_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderDataDistributeInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderDataDistributeInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderDataDistributeInfo is not found in the empty JSON string", OrderDataDistributeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderDataDistributeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderDataDistributeInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("not_distribute_reason") != null && !jsonObj.get("not_distribute_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `not_distribute_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("not_distribute_reason").toString()));
      }
      if (jsonObj.get("scene_code") != null && !jsonObj.get("scene_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scene_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scene_code").toString()));
      }
      if (jsonObj.get("scene_name") != null && !jsonObj.get("scene_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scene_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scene_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderDataDistributeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderDataDistributeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderDataDistributeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderDataDistributeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderDataDistributeInfo>() {
           @Override
           public void write(JsonWriter out, OrderDataDistributeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderDataDistributeInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderDataDistributeInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderDataDistributeInfo
  * @throws IOException if the JSON string is invalid with respect to OrderDataDistributeInfo
  */
  public static OrderDataDistributeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderDataDistributeInfo.class);
  }

 /**
  * Convert an instance of OrderDataDistributeInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

