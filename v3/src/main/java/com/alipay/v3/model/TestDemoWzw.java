/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-03-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * TestDemoWzw
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestDemoWzw {
  public static final String SERIALIZED_NAME_AAOPEN_ID = "aaopen_id";
  @SerializedName(SERIALIZED_NAME_AAOPEN_ID)
  private String aaopenId;

  public static final String SERIALIZED_NAME_AAUIDS = "aauids";
  @SerializedName(SERIALIZED_NAME_AAUIDS)
  private String aauids;

  public static final String SERIALIZED_NAME_ID_TYPE = "id_type";
  @SerializedName(SERIALIZED_NAME_ID_TYPE)
  private String idType;

  public static final String SERIALIZED_NAME_OID_OPEN_ID = "oid_open_id";
  @SerializedName(SERIALIZED_NAME_OID_OPEN_ID)
  private String oidOpenId;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public TestDemoWzw() { 
  }

  public TestDemoWzw aaopenId(String aaopenId) {
    
    this.aaopenId = aaopenId;
    return this;
  }

   /**
   * 哈哈
   * @return aaopenId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "哈哈")

  public String getAaopenId() {
    return aaopenId;
  }


  public void setAaopenId(String aaopenId) {
    this.aaopenId = aaopenId;
  }


  public TestDemoWzw aauids(String aauids) {
    
    this.aauids = aauids;
    return this;
  }

   /**
   * 哈哈
   * @return aauids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "哈哈")

  public String getAauids() {
    return aauids;
  }


  public void setAauids(String aauids) {
    this.aauids = aauids;
  }


  public TestDemoWzw idType(String idType) {
    
    this.idType = idType;
    return this;
  }

   /**
   * 哈哈
   * @return idType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "哈哈")

  public String getIdType() {
    return idType;
  }


  public void setIdType(String idType) {
    this.idType = idType;
  }


  public TestDemoWzw oidOpenId(String oidOpenId) {
    
    this.oidOpenId = oidOpenId;
    return this;
  }

   /**
   * 哈哈
   * @return oidOpenId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "哈哈")

  public String getOidOpenId() {
    return oidOpenId;
  }


  public void setOidOpenId(String oidOpenId) {
    this.oidOpenId = oidOpenId;
  }


  public TestDemoWzw uid(String uid) {
    
    this.uid = uid;
    return this;
  }

   /**
   * 哈哈
   * @return uid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "哈哈")

  public String getUid() {
    return uid;
  }


  public void setUid(String uid) {
    this.uid = uid;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TestDemoWzw instance itself
   */
  public TestDemoWzw putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestDemoWzw testDemoWzw = (TestDemoWzw) o;
    return Objects.equals(this.aaopenId, testDemoWzw.aaopenId) &&
        Objects.equals(this.aauids, testDemoWzw.aauids) &&
        Objects.equals(this.idType, testDemoWzw.idType) &&
        Objects.equals(this.oidOpenId, testDemoWzw.oidOpenId) &&
        Objects.equals(this.uid, testDemoWzw.uid)&&
        Objects.equals(this.additionalProperties, testDemoWzw.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aaopenId, aauids, idType, oidOpenId, uid, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestDemoWzw {\n");
    sb.append("    aaopenId: ").append(toIndentedString(aaopenId)).append("\n");
    sb.append("    aauids: ").append(toIndentedString(aauids)).append("\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    oidOpenId: ").append(toIndentedString(oidOpenId)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aaopen_id");
    openapiFields.add("aauids");
    openapiFields.add("id_type");
    openapiFields.add("oid_open_id");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TestDemoWzw
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TestDemoWzw.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestDemoWzw is not found in the empty JSON string", TestDemoWzw.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("aaopen_id") != null && !jsonObj.get("aaopen_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aaopen_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aaopen_id").toString()));
      }
      if (jsonObj.get("aauids") != null && !jsonObj.get("aauids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aauids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aauids").toString()));
      }
      if (jsonObj.get("id_type") != null && !jsonObj.get("id_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_type").toString()));
      }
      if (jsonObj.get("oid_open_id") != null && !jsonObj.get("oid_open_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oid_open_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oid_open_id").toString()));
      }
      if (jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestDemoWzw.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestDemoWzw' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestDemoWzw> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestDemoWzw.class));

       return (TypeAdapter<T>) new TypeAdapter<TestDemoWzw>() {
           @Override
           public void write(JsonWriter out, TestDemoWzw value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TestDemoWzw read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TestDemoWzw instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestDemoWzw given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestDemoWzw
  * @throws IOException if the JSON string is invalid with respect to TestDemoWzw
  */
  public static TestDemoWzw fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestDemoWzw.class);
  }

 /**
  * Convert an instance of TestDemoWzw to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

