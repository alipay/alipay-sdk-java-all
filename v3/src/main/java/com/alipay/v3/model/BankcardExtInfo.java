/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-08-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * BankcardExtInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BankcardExtInfo {
  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_BANK_CODE = "bank_code";
  @SerializedName(SERIALIZED_NAME_BANK_CODE)
  private String bankCode;

  public static final String SERIALIZED_NAME_INST_BRANCH_NAME = "inst_branch_name";
  @SerializedName(SERIALIZED_NAME_INST_BRANCH_NAME)
  private String instBranchName;

  public static final String SERIALIZED_NAME_INST_CITY = "inst_city";
  @SerializedName(SERIALIZED_NAME_INST_CITY)
  private String instCity;

  public static final String SERIALIZED_NAME_INST_NAME = "inst_name";
  @SerializedName(SERIALIZED_NAME_INST_NAME)
  private String instName;

  public static final String SERIALIZED_NAME_INST_PROVINCE = "inst_province";
  @SerializedName(SERIALIZED_NAME_INST_PROVINCE)
  private String instProvince;

  public BankcardExtInfo() { 
  }

  public BankcardExtInfo accountType(String accountType) {
    
    this.accountType = accountType;
    return this;
  }

   /**
   * 收款账户类型。 1：对公（在金融机构开设的公司账户） 2：对私（在金融机构开设的个人账户）
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "收款账户类型。 1：对公（在金融机构开设的公司账户） 2：对私（在金融机构开设的个人账户）")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public BankcardExtInfo bankCode(String bankCode) {
    
    this.bankCode = bankCode;
    return this;
  }

   /**
   * 银行支行联行号
   * @return bankCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "银行支行联行号")

  public String getBankCode() {
    return bankCode;
  }


  public void setBankCode(String bankCode) {
    this.bankCode = bankCode;
  }


  public BankcardExtInfo instBranchName(String instBranchName) {
    
    this.instBranchName = instBranchName;
    return this;
  }

   /**
   * 收款银行所属支行
   * @return instBranchName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "收款银行所属支行")

  public String getInstBranchName() {
    return instBranchName;
  }


  public void setInstBranchName(String instBranchName) {
    this.instBranchName = instBranchName;
  }


  public BankcardExtInfo instCity(String instCity) {
    
    this.instCity = instCity;
    return this;
  }

   /**
   * 收款银行所在市
   * @return instCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "收款银行所在市")

  public String getInstCity() {
    return instCity;
  }


  public void setInstCity(String instCity) {
    this.instCity = instCity;
  }


  public BankcardExtInfo instName(String instName) {
    
    this.instName = instName;
    return this;
  }

   /**
   * 机构名称
   * @return instName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "机构名称")

  public String getInstName() {
    return instName;
  }


  public void setInstName(String instName) {
    this.instName = instName;
  }


  public BankcardExtInfo instProvince(String instProvince) {
    
    this.instProvince = instProvince;
    return this;
  }

   /**
   * 银行所在省
   * @return instProvince
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "银行所在省")

  public String getInstProvince() {
    return instProvince;
  }


  public void setInstProvince(String instProvince) {
    this.instProvince = instProvince;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BankcardExtInfo instance itself
   */
  public BankcardExtInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankcardExtInfo bankcardExtInfo = (BankcardExtInfo) o;
    return Objects.equals(this.accountType, bankcardExtInfo.accountType) &&
        Objects.equals(this.bankCode, bankcardExtInfo.bankCode) &&
        Objects.equals(this.instBranchName, bankcardExtInfo.instBranchName) &&
        Objects.equals(this.instCity, bankcardExtInfo.instCity) &&
        Objects.equals(this.instName, bankcardExtInfo.instName) &&
        Objects.equals(this.instProvince, bankcardExtInfo.instProvince)&&
        Objects.equals(this.additionalProperties, bankcardExtInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, bankCode, instBranchName, instCity, instName, instProvince, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankcardExtInfo {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("    instBranchName: ").append(toIndentedString(instBranchName)).append("\n");
    sb.append("    instCity: ").append(toIndentedString(instCity)).append("\n");
    sb.append("    instName: ").append(toIndentedString(instName)).append("\n");
    sb.append("    instProvince: ").append(toIndentedString(instProvince)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_type");
    openapiFields.add("bank_code");
    openapiFields.add("inst_branch_name");
    openapiFields.add("inst_city");
    openapiFields.add("inst_name");
    openapiFields.add("inst_province");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BankcardExtInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BankcardExtInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankcardExtInfo is not found in the empty JSON string", BankcardExtInfo.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("account_type") != null && !jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if (jsonObj.get("bank_code") != null && !jsonObj.get("bank_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank_code").toString()));
      }
      if (jsonObj.get("inst_branch_name") != null && !jsonObj.get("inst_branch_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inst_branch_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inst_branch_name").toString()));
      }
      if (jsonObj.get("inst_city") != null && !jsonObj.get("inst_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inst_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inst_city").toString()));
      }
      if (jsonObj.get("inst_name") != null && !jsonObj.get("inst_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inst_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inst_name").toString()));
      }
      if (jsonObj.get("inst_province") != null && !jsonObj.get("inst_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inst_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inst_province").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankcardExtInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankcardExtInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankcardExtInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankcardExtInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BankcardExtInfo>() {
           @Override
           public void write(JsonWriter out, BankcardExtInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BankcardExtInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BankcardExtInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BankcardExtInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BankcardExtInfo
  * @throws IOException if the JSON string is invalid with respect to BankcardExtInfo
  */
  public static BankcardExtInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankcardExtInfo.class);
  }

 /**
  * Convert an instance of BankcardExtInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

