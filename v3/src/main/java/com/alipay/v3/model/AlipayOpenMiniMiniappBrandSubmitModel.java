/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-08-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.alipay.v3.model.AuthorizeInfo;
import com.alipay.v3.model.BrandRegistrationInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * AlipayOpenMiniMiniappBrandSubmitModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AlipayOpenMiniMiniappBrandSubmitModel {
  public static final String SERIALIZED_NAME_APPLY_TYPE = "apply_type";
  @SerializedName(SERIALIZED_NAME_APPLY_TYPE)
  private String applyType;

  public static final String SERIALIZED_NAME_AUTHORIZE_INFO = "authorize_info";
  @SerializedName(SERIALIZED_NAME_AUTHORIZE_INFO)
  private AuthorizeInfo authorizeInfo;

  public static final String SERIALIZED_NAME_BRAND_ID = "brand_id";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_BRAND_NAME = "brand_name";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_BRAND_REGISTRATION_INFO = "brand_registration_info";
  @SerializedName(SERIALIZED_NAME_BRAND_REGISTRATION_INFO)
  private BrandRegistrationInfo brandRegistrationInfo;

  public static final String SERIALIZED_NAME_ID_MATERIALS = "id_materials";
  @SerializedName(SERIALIZED_NAME_ID_MATERIALS)
  private List<String> idMaterials = null;

  public AlipayOpenMiniMiniappBrandSubmitModel() { 
  }

  public AlipayOpenMiniMiniappBrandSubmitModel applyType(String applyType) {
    
    this.applyType = applyType;
    return this;
  }

   /**
   * 申请的资质类型 SELF_BRAND_APPLY 自有品牌申请(当需要一个新的品牌时选择此项) AUTHORIZE_BRAND_APPLY 授权品牌申请(当需要授权一个已有的品牌给商户时选择此项) EXIST_BRAND_BIND 品牌绑定，适用于品牌已申请成功的情况(当需要将已有品牌绑定到无品牌小程序时选择此项)
   * @return applyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AUTHORIZE_BRAND_APPLY", value = "申请的资质类型 SELF_BRAND_APPLY 自有品牌申请(当需要一个新的品牌时选择此项) AUTHORIZE_BRAND_APPLY 授权品牌申请(当需要授权一个已有的品牌给商户时选择此项) EXIST_BRAND_BIND 品牌绑定，适用于品牌已申请成功的情况(当需要将已有品牌绑定到无品牌小程序时选择此项)")

  public String getApplyType() {
    return applyType;
  }


  public void setApplyType(String applyType) {
    this.applyType = applyType;
  }


  public AlipayOpenMiniMiniappBrandSubmitModel authorizeInfo(AuthorizeInfo authorizeInfo) {
    
    this.authorizeInfo = authorizeInfo;
    return this;
  }

   /**
   * Get authorizeInfo
   * @return authorizeInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AuthorizeInfo getAuthorizeInfo() {
    return authorizeInfo;
  }


  public void setAuthorizeInfo(AuthorizeInfo authorizeInfo) {
    this.authorizeInfo = authorizeInfo;
  }


  public AlipayOpenMiniMiniappBrandSubmitModel brandId(String brandId) {
    
    this.brandId = brandId;
    return this;
  }

   /**
   * 商户已有品牌Id(只有申请的资质类型为EXIST_BRAND_BIND 时需要填写)
   * @return brandId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "brand2020091614782813", value = "商户已有品牌Id(只有申请的资质类型为EXIST_BRAND_BIND 时需要填写)")

  public String getBrandId() {
    return brandId;
  }


  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public AlipayOpenMiniMiniappBrandSubmitModel brandName(String brandName) {
    
    this.brandName = brandName;
    return this;
  }

   /**
   * 品牌名称
   * @return brandName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CR7合作", value = "品牌名称")

  public String getBrandName() {
    return brandName;
  }


  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public AlipayOpenMiniMiniappBrandSubmitModel brandRegistrationInfo(BrandRegistrationInfo brandRegistrationInfo) {
    
    this.brandRegistrationInfo = brandRegistrationInfo;
    return this;
  }

   /**
   * Get brandRegistrationInfo
   * @return brandRegistrationInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BrandRegistrationInfo getBrandRegistrationInfo() {
    return brandRegistrationInfo;
  }


  public void setBrandRegistrationInfo(BrandRegistrationInfo brandRegistrationInfo) {
    this.brandRegistrationInfo = brandRegistrationInfo;
  }


  public AlipayOpenMiniMiniappBrandSubmitModel idMaterials(List<String> idMaterials) {
    
    this.idMaterials = idMaterials;
    return this;
  }

  public AlipayOpenMiniMiniappBrandSubmitModel addIdMaterialsItem(String idMaterialsItem) {
    if (this.idMaterials == null) {
      this.idMaterials = new ArrayList<>();
    }
    this.idMaterials.add(idMaterialsItem);
    return this;
  }

   /**
   * 申请人身份证明材料(当前只支持图片类型，请调用alipay.open.mini.miniapp.brand.upload接口上传图片，可以上传多个身份证明材料)
   * @return idMaterials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"ua2qD53TRpyfX-UYYin6sQAAACMAAQED\",\"ua2qD53TRpyfX-UYYin6sQAAACMAAQED\"]", value = "申请人身份证明材料(当前只支持图片类型，请调用alipay.open.mini.miniapp.brand.upload接口上传图片，可以上传多个身份证明材料)")

  public List<String> getIdMaterials() {
    return idMaterials;
  }


  public void setIdMaterials(List<String> idMaterials) {
    this.idMaterials = idMaterials;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AlipayOpenMiniMiniappBrandSubmitModel instance itself
   */
  public AlipayOpenMiniMiniappBrandSubmitModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlipayOpenMiniMiniappBrandSubmitModel alipayOpenMiniMiniappBrandSubmitModel = (AlipayOpenMiniMiniappBrandSubmitModel) o;
    return Objects.equals(this.applyType, alipayOpenMiniMiniappBrandSubmitModel.applyType) &&
        Objects.equals(this.authorizeInfo, alipayOpenMiniMiniappBrandSubmitModel.authorizeInfo) &&
        Objects.equals(this.brandId, alipayOpenMiniMiniappBrandSubmitModel.brandId) &&
        Objects.equals(this.brandName, alipayOpenMiniMiniappBrandSubmitModel.brandName) &&
        Objects.equals(this.brandRegistrationInfo, alipayOpenMiniMiniappBrandSubmitModel.brandRegistrationInfo) &&
        Objects.equals(this.idMaterials, alipayOpenMiniMiniappBrandSubmitModel.idMaterials)&&
        Objects.equals(this.additionalProperties, alipayOpenMiniMiniappBrandSubmitModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyType, authorizeInfo, brandId, brandName, brandRegistrationInfo, idMaterials, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlipayOpenMiniMiniappBrandSubmitModel {\n");
    sb.append("    applyType: ").append(toIndentedString(applyType)).append("\n");
    sb.append("    authorizeInfo: ").append(toIndentedString(authorizeInfo)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    brandRegistrationInfo: ").append(toIndentedString(brandRegistrationInfo)).append("\n");
    sb.append("    idMaterials: ").append(toIndentedString(idMaterials)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apply_type");
    openapiFields.add("authorize_info");
    openapiFields.add("brand_id");
    openapiFields.add("brand_name");
    openapiFields.add("brand_registration_info");
    openapiFields.add("id_materials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AlipayOpenMiniMiniappBrandSubmitModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AlipayOpenMiniMiniappBrandSubmitModel.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlipayOpenMiniMiniappBrandSubmitModel is not found in the empty JSON string", AlipayOpenMiniMiniappBrandSubmitModel.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("apply_type") != null && !jsonObj.get("apply_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apply_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apply_type").toString()));
      }
      // validate the optional field `authorize_info`
      if (jsonObj.getAsJsonObject("authorize_info") != null) {
        AuthorizeInfo.validateJsonObject(jsonObj.getAsJsonObject("authorize_info"));
      }
      if (jsonObj.get("brand_id") != null && !jsonObj.get("brand_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_id").toString()));
      }
      if (jsonObj.get("brand_name") != null && !jsonObj.get("brand_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_name").toString()));
      }
      // validate the optional field `brand_registration_info`
      if (jsonObj.getAsJsonObject("brand_registration_info") != null) {
        BrandRegistrationInfo.validateJsonObject(jsonObj.getAsJsonObject("brand_registration_info"));
      }
      // ensure the json data is an array
      if (jsonObj.get("id_materials") != null && !jsonObj.get("id_materials").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_materials` to be an array in the JSON string but got `%s`", jsonObj.get("id_materials").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlipayOpenMiniMiniappBrandSubmitModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlipayOpenMiniMiniappBrandSubmitModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlipayOpenMiniMiniappBrandSubmitModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlipayOpenMiniMiniappBrandSubmitModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AlipayOpenMiniMiniappBrandSubmitModel>() {
           @Override
           public void write(JsonWriter out, AlipayOpenMiniMiniappBrandSubmitModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AlipayOpenMiniMiniappBrandSubmitModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AlipayOpenMiniMiniappBrandSubmitModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlipayOpenMiniMiniappBrandSubmitModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlipayOpenMiniMiniappBrandSubmitModel
  * @throws IOException if the JSON string is invalid with respect to AlipayOpenMiniMiniappBrandSubmitModel
  */
  public static AlipayOpenMiniMiniappBrandSubmitModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlipayOpenMiniMiniappBrandSubmitModel.class);
  }

 /**
  * Convert an instance of AlipayOpenMiniMiniappBrandSubmitModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

