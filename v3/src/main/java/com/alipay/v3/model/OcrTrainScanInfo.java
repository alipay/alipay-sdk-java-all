/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * OcrTrainScanInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OcrTrainScanInfo {
  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoice_date";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private String invoiceDate;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_PASSENGER = "passenger";
  @SerializedName(SERIALIZED_NAME_PASSENGER)
  private String passenger;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_REMARK = "remark";
  @SerializedName(SERIALIZED_NAME_REMARK)
  private String remark;

  public static final String SERIALIZED_NAME_SEAT_CLASS = "seat_class";
  @SerializedName(SERIALIZED_NAME_SEAT_CLASS)
  private String seatClass;

  public static final String SERIALIZED_NAME_TRAIN_NO = "train_no";
  @SerializedName(SERIALIZED_NAME_TRAIN_NO)
  private String trainNo;

  public OcrTrainScanInfo() { 
  }

  public OcrTrainScanInfo destination(String destination) {
    
    this.destination = destination;
    return this;
  }

   /**
   * 目的地
   * @return destination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "目的地")

  public String getDestination() {
    return destination;
  }


  public void setDestination(String destination) {
    this.destination = destination;
  }


  public OcrTrainScanInfo invoiceDate(String invoiceDate) {
    
    this.invoiceDate = invoiceDate;
    return this;
  }

   /**
   * 乘车日期
   * @return invoiceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "乘车日期")

  public String getInvoiceDate() {
    return invoiceDate;
  }


  public void setInvoiceDate(String invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public OcrTrainScanInfo origin(String origin) {
    
    this.origin = origin;
    return this;
  }

   /**
   * 出发地
   * @return origin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "出发地")

  public String getOrigin() {
    return origin;
  }


  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public OcrTrainScanInfo passenger(String passenger) {
    
    this.passenger = passenger;
    return this;
  }

   /**
   * 乘客
   * @return passenger
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "乘客")

  public String getPassenger() {
    return passenger;
  }


  public void setPassenger(String passenger) {
    this.passenger = passenger;
  }


  public OcrTrainScanInfo price(String price) {
    
    this.price = price;
    return this;
  }

   /**
   * 金额（元）
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "金额（元）")

  public String getPrice() {
    return price;
  }


  public void setPrice(String price) {
    this.price = price;
  }


  public OcrTrainScanInfo remark(String remark) {
    
    this.remark = remark;
    return this;
  }

   /**
   * 明细事由
   * @return remark
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "明细事由")

  public String getRemark() {
    return remark;
  }


  public void setRemark(String remark) {
    this.remark = remark;
  }


  public OcrTrainScanInfo seatClass(String seatClass) {
    
    this.seatClass = seatClass;
    return this;
  }

   /**
   * 座次
   * @return seatClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "座次")

  public String getSeatClass() {
    return seatClass;
  }


  public void setSeatClass(String seatClass) {
    this.seatClass = seatClass;
  }


  public OcrTrainScanInfo trainNo(String trainNo) {
    
    this.trainNo = trainNo;
    return this;
  }

   /**
   * 车次
   * @return trainNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "车次")

  public String getTrainNo() {
    return trainNo;
  }


  public void setTrainNo(String trainNo) {
    this.trainNo = trainNo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OcrTrainScanInfo instance itself
   */
  public OcrTrainScanInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OcrTrainScanInfo ocrTrainScanInfo = (OcrTrainScanInfo) o;
    return Objects.equals(this.destination, ocrTrainScanInfo.destination) &&
        Objects.equals(this.invoiceDate, ocrTrainScanInfo.invoiceDate) &&
        Objects.equals(this.origin, ocrTrainScanInfo.origin) &&
        Objects.equals(this.passenger, ocrTrainScanInfo.passenger) &&
        Objects.equals(this.price, ocrTrainScanInfo.price) &&
        Objects.equals(this.remark, ocrTrainScanInfo.remark) &&
        Objects.equals(this.seatClass, ocrTrainScanInfo.seatClass) &&
        Objects.equals(this.trainNo, ocrTrainScanInfo.trainNo)&&
        Objects.equals(this.additionalProperties, ocrTrainScanInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destination, invoiceDate, origin, passenger, price, remark, seatClass, trainNo, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OcrTrainScanInfo {\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    passenger: ").append(toIndentedString(passenger)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("    seatClass: ").append(toIndentedString(seatClass)).append("\n");
    sb.append("    trainNo: ").append(toIndentedString(trainNo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination");
    openapiFields.add("invoice_date");
    openapiFields.add("origin");
    openapiFields.add("passenger");
    openapiFields.add("price");
    openapiFields.add("remark");
    openapiFields.add("seat_class");
    openapiFields.add("train_no");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OcrTrainScanInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OcrTrainScanInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OcrTrainScanInfo is not found in the empty JSON string", OcrTrainScanInfo.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      if (jsonObj.get("invoice_date") != null && !jsonObj.get("invoice_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_date").toString()));
      }
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if (jsonObj.get("passenger") != null && !jsonObj.get("passenger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passenger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passenger").toString()));
      }
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if (jsonObj.get("remark") != null && !jsonObj.get("remark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remark").toString()));
      }
      if (jsonObj.get("seat_class") != null && !jsonObj.get("seat_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seat_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seat_class").toString()));
      }
      if (jsonObj.get("train_no") != null && !jsonObj.get("train_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `train_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("train_no").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OcrTrainScanInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OcrTrainScanInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OcrTrainScanInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OcrTrainScanInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<OcrTrainScanInfo>() {
           @Override
           public void write(JsonWriter out, OcrTrainScanInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OcrTrainScanInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OcrTrainScanInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OcrTrainScanInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OcrTrainScanInfo
  * @throws IOException if the JSON string is invalid with respect to OcrTrainScanInfo
  */
  public static OcrTrainScanInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OcrTrainScanInfo.class);
  }

 /**
  * Convert an instance of OcrTrainScanInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

