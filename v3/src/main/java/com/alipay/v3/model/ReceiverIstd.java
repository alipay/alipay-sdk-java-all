/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-06
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * ReceiverIstd
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReceiverIstd {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ADDRESS_DETAIL = "address_detail";
  @SerializedName(SERIALIZED_NAME_ADDRESS_DETAIL)
  private String addressDetail;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COORDINATE_TYPE = "coordinate_type";
  @SerializedName(SERIALIZED_NAME_COORDINATE_TYPE)
  private Integer coordinateType;

  public static final String SERIALIZED_NAME_LAT = "lat";
  @SerializedName(SERIALIZED_NAME_LAT)
  private String lat;

  public static final String SERIALIZED_NAME_LNG = "lng";
  @SerializedName(SERIALIZED_NAME_LNG)
  private String lng;

  public static final String SERIALIZED_NAME_MOBILE_NO = "mobile_no";
  @SerializedName(SERIALIZED_NAME_MOBILE_NO)
  private String mobileNo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ReceiverIstd() { 
  }

  public ReceiverIstd address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * 地址(街道、小区、大厦等，用于定位)
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "地址(街道、小区、大厦等，用于定位)")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public ReceiverIstd addressDetail(String addressDetail) {
    
    this.addressDetail = addressDetail;
    return this;
  }

   /**
   * 地址详情(楼号、单元号、层号)
   * @return addressDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "地址详情(楼号、单元号、层号)")

  public String getAddressDetail() {
    return addressDetail;
  }


  public void setAddressDetail(String addressDetail) {
    this.addressDetail = addressDetail;
  }


  public ReceiverIstd city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * 城市名称，如杭州市
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "城市名称，如杭州市")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    this.city = city;
  }


  public ReceiverIstd coordinateType(Integer coordinateType) {
    
    this.coordinateType = coordinateType;
    return this;
  }

   /**
   * 坐标类型，0：火星坐标（高德，腾讯地图均采用火星坐标） 1：百度坐标。目前只支持0:火星坐标
   * @return coordinateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "坐标类型，0：火星坐标（高德，腾讯地图均采用火星坐标） 1：百度坐标。目前只支持0:火星坐标")

  public Integer getCoordinateType() {
    return coordinateType;
  }


  public void setCoordinateType(Integer coordinateType) {
    this.coordinateType = coordinateType;
  }


  public ReceiverIstd lat(String lat) {
    
    this.lat = lat;
    return this;
  }

   /**
   * 纬度
   * @return lat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "纬度")

  public String getLat() {
    return lat;
  }


  public void setLat(String lat) {
    this.lat = lat;
  }


  public ReceiverIstd lng(String lng) {
    
    this.lng = lng;
    return this;
  }

   /**
   * 经度
   * @return lng
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "经度")

  public String getLng() {
    return lng;
  }


  public void setLng(String lng) {
    this.lng = lng;
  }


  public ReceiverIstd mobileNo(String mobileNo) {
    
    this.mobileNo = mobileNo;
    return this;
  }

   /**
   * 手机号
   * @return mobileNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "手机号")

  public String getMobileNo() {
    return mobileNo;
  }


  public void setMobileNo(String mobileNo) {
    this.mobileNo = mobileNo;
  }


  public ReceiverIstd name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * 姓名
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "姓名")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReceiverIstd instance itself
   */
  public ReceiverIstd putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiverIstd receiverIstd = (ReceiverIstd) o;
    return Objects.equals(this.address, receiverIstd.address) &&
        Objects.equals(this.addressDetail, receiverIstd.addressDetail) &&
        Objects.equals(this.city, receiverIstd.city) &&
        Objects.equals(this.coordinateType, receiverIstd.coordinateType) &&
        Objects.equals(this.lat, receiverIstd.lat) &&
        Objects.equals(this.lng, receiverIstd.lng) &&
        Objects.equals(this.mobileNo, receiverIstd.mobileNo) &&
        Objects.equals(this.name, receiverIstd.name)&&
        Objects.equals(this.additionalProperties, receiverIstd.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, addressDetail, city, coordinateType, lat, lng, mobileNo, name, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiverIstd {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    addressDetail: ").append(toIndentedString(addressDetail)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    coordinateType: ").append(toIndentedString(coordinateType)).append("\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lng: ").append(toIndentedString(lng)).append("\n");
    sb.append("    mobileNo: ").append(toIndentedString(mobileNo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("address_detail");
    openapiFields.add("city");
    openapiFields.add("coordinate_type");
    openapiFields.add("lat");
    openapiFields.add("lng");
    openapiFields.add("mobile_no");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReceiverIstd
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ReceiverIstd.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiverIstd is not found in the empty JSON string", ReceiverIstd.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (jsonObj.get("address_detail") != null && !jsonObj.get("address_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_detail").toString()));
      }
      if (jsonObj.get("city") != null && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (jsonObj.get("lat") != null && !jsonObj.get("lat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lat").toString()));
      }
      if (jsonObj.get("lng") != null && !jsonObj.get("lng").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lng` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lng").toString()));
      }
      if (jsonObj.get("mobile_no") != null && !jsonObj.get("mobile_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_no").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiverIstd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiverIstd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiverIstd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiverIstd.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiverIstd>() {
           @Override
           public void write(JsonWriter out, ReceiverIstd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiverIstd read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReceiverIstd instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReceiverIstd given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReceiverIstd
  * @throws IOException if the JSON string is invalid with respect to ReceiverIstd
  */
  public static ReceiverIstd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiverIstd.class);
  }

 /**
  * Convert an instance of ReceiverIstd to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

