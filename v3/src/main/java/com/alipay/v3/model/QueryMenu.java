/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2024-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.alipay.v3.model.ButtonObject;
import com.alipay.v3.model.QueryLabelRule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * QueryMenu
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class QueryMenu {
  public static final String SERIALIZED_NAME_BUTTON = "button";
  @SerializedName(SERIALIZED_NAME_BUTTON)
  private List<ButtonObject> button = null;

  public static final String SERIALIZED_NAME_LABEL_RULE = "label_rule";
  @SerializedName(SERIALIZED_NAME_LABEL_RULE)
  private List<QueryLabelRule> labelRule = null;

  public static final String SERIALIZED_NAME_MENU_KEY = "menu_key";
  @SerializedName(SERIALIZED_NAME_MENU_KEY)
  private String menuKey;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public QueryMenu() { 
  }

  public QueryMenu button(List<ButtonObject> button) {
    
    this.button = button;
    return this;
  }

  public QueryMenu addButtonItem(ButtonObject buttonItem) {
    if (this.button == null) {
      this.button = new ArrayList<>();
    }
    this.button.add(buttonItem);
    return this;
  }

   /**
   * 一级菜单列表
   * @return button
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "一级菜单列表")

  public List<ButtonObject> getButton() {
    return button;
  }


  public void setButton(List<ButtonObject> button) {
    this.button = button;
  }


  public QueryMenu labelRule(List<QueryLabelRule> labelRule) {
    
    this.labelRule = labelRule;
    return this;
  }

  public QueryMenu addLabelRuleItem(QueryLabelRule labelRuleItem) {
    if (this.labelRule == null) {
      this.labelRule = new ArrayList<>();
    }
    this.labelRule.add(labelRuleItem);
    return this;
  }

   /**
   * 标签规则项列表
   * @return labelRule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "标签规则项列表")

  public List<QueryLabelRule> getLabelRule() {
    return labelRule;
  }


  public void setLabelRule(List<QueryLabelRule> labelRule) {
    this.labelRule = labelRule;
  }


  public QueryMenu menuKey(String menuKey) {
    
    this.menuKey = menuKey;
    return this;
  }

   /**
   * 菜单唯一id
   * @return menuKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "default", value = "菜单唯一id")

  public String getMenuKey() {
    return menuKey;
  }


  public void setMenuKey(String menuKey) {
    this.menuKey = menuKey;
  }


  public QueryMenu type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * 菜单类型，icon：icon型菜单，text：文本型菜单
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "icon", value = "菜单类型，icon：icon型菜单，text：文本型菜单")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryMenu queryMenu = (QueryMenu) o;
    return Objects.equals(this.button, queryMenu.button) &&
        Objects.equals(this.labelRule, queryMenu.labelRule) &&
        Objects.equals(this.menuKey, queryMenu.menuKey) &&
        Objects.equals(this.type, queryMenu.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(button, labelRule, menuKey, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryMenu {\n");
    sb.append("    button: ").append(toIndentedString(button)).append("\n");
    sb.append("    labelRule: ").append(toIndentedString(labelRule)).append("\n");
    sb.append("    menuKey: ").append(toIndentedString(menuKey)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("button");
    openapiFields.add("label_rule");
    openapiFields.add("menu_key");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QueryMenu
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (QueryMenu.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryMenu is not found in the empty JSON string", QueryMenu.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!QueryMenu.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryMenu` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      JsonArray jsonArraybutton = jsonObj.getAsJsonArray("button");
      if (jsonArraybutton != null) {
        // ensure the json data is an array
        if (!jsonObj.get("button").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `button` to be an array in the JSON string but got `%s`", jsonObj.get("button").toString()));
        }

        // validate the optional field `button` (array)
        for (int i = 0; i < jsonArraybutton.size(); i++) {
          ButtonObject.validateJsonObject(jsonArraybutton.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraylabelRule = jsonObj.getAsJsonArray("label_rule");
      if (jsonArraylabelRule != null) {
        // ensure the json data is an array
        if (!jsonObj.get("label_rule").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `label_rule` to be an array in the JSON string but got `%s`", jsonObj.get("label_rule").toString()));
        }

        // validate the optional field `label_rule` (array)
        for (int i = 0; i < jsonArraylabelRule.size(); i++) {
          QueryLabelRule.validateJsonObject(jsonArraylabelRule.get(i).getAsJsonObject());
        };
      }
      if (jsonObj.get("menu_key") != null && !jsonObj.get("menu_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `menu_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("menu_key").toString()));
      }
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryMenu.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryMenu' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryMenu> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryMenu.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryMenu>() {
           @Override
           public void write(JsonWriter out, QueryMenu value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryMenu read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QueryMenu given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QueryMenu
  * @throws IOException if the JSON string is invalid with respect to QueryMenu
  */
  public static QueryMenu fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryMenu.class);
  }

 /**
  * Convert an instance of QueryMenu to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

