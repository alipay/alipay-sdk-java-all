/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-03-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.alipay.v3.model.TestDemo;
import com.alipay.v3.model.TestDemoWzw;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * AlipayOpenOperationOpenbizmockPatchQueryModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AlipayOpenOperationOpenbizmockPatchQueryModel {
  public static final String SERIALIZED_NAME_C_BODY = "c_body";
  @SerializedName(SERIALIZED_NAME_C_BODY)
  private String cBody;

  public static final String SERIALIZED_NAME_COMPLEX_A = "complex_a";
  @SerializedName(SERIALIZED_NAME_COMPLEX_A)
  private TestDemo complexA;

  public static final String SERIALIZED_NAME_COMPLEX_B = "complex_b";
  @SerializedName(SERIALIZED_NAME_COMPLEX_B)
  private TestDemo complexB;

  public static final String SERIALIZED_NAME_COMPLEX_C = "complex_c";
  @SerializedName(SERIALIZED_NAME_COMPLEX_C)
  private TestDemoWzw complexC;

  public static final String SERIALIZED_NAME_COMPLEX_D = "complex_d";
  @SerializedName(SERIALIZED_NAME_COMPLEX_D)
  private TestDemoWzw complexD;

  public static final String SERIALIZED_NAME_ID_TYPE_MODIFY_OPEN_ID = "id_type_modify_open_id";
  @SerializedName(SERIALIZED_NAME_ID_TYPE_MODIFY_OPEN_ID)
  private String idTypeModifyOpenId;

  public static final String SERIALIZED_NAME_ID_TYPEA = "id_typea";
  @SerializedName(SERIALIZED_NAME_ID_TYPEA)
  private String idTypea;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public static final String SERIALIZED_NAME_UIDA = "uida";
  @SerializedName(SERIALIZED_NAME_UIDA)
  private String uida;

  public AlipayOpenOperationOpenbizmockPatchQueryModel() { 
  }

  public AlipayOpenOperationOpenbizmockPatchQueryModel cBody(String cBody) {
    
    this.cBody = cBody;
    return this;
  }

   /**
   * test
   * @return cBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "test", value = "test")

  public String getcBody() {
    return cBody;
  }


  public void setcBody(String cBody) {
    this.cBody = cBody;
  }


  public AlipayOpenOperationOpenbizmockPatchQueryModel complexA(TestDemo complexA) {
    
    this.complexA = complexA;
    return this;
  }

   /**
   * Get complexA
   * @return complexA
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TestDemo getComplexA() {
    return complexA;
  }


  public void setComplexA(TestDemo complexA) {
    this.complexA = complexA;
  }


  public AlipayOpenOperationOpenbizmockPatchQueryModel complexB(TestDemo complexB) {
    
    this.complexB = complexB;
    return this;
  }

   /**
   * Get complexB
   * @return complexB
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TestDemo getComplexB() {
    return complexB;
  }


  public void setComplexB(TestDemo complexB) {
    this.complexB = complexB;
  }


  public AlipayOpenOperationOpenbizmockPatchQueryModel complexC(TestDemoWzw complexC) {
    
    this.complexC = complexC;
    return this;
  }

   /**
   * Get complexC
   * @return complexC
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TestDemoWzw getComplexC() {
    return complexC;
  }


  public void setComplexC(TestDemoWzw complexC) {
    this.complexC = complexC;
  }


  public AlipayOpenOperationOpenbizmockPatchQueryModel complexD(TestDemoWzw complexD) {
    
    this.complexD = complexD;
    return this;
  }

   /**
   * Get complexD
   * @return complexD
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TestDemoWzw getComplexD() {
    return complexD;
  }


  public void setComplexD(TestDemoWzw complexD) {
    this.complexD = complexD;
  }


  public AlipayOpenOperationOpenbizmockPatchQueryModel idTypeModifyOpenId(String idTypeModifyOpenId) {
    
    this.idTypeModifyOpenId = idTypeModifyOpenId;
    return this;
  }

   /**
   * 1
   * @return idTypeModifyOpenId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "1")

  public String getIdTypeModifyOpenId() {
    return idTypeModifyOpenId;
  }


  public void setIdTypeModifyOpenId(String idTypeModifyOpenId) {
    this.idTypeModifyOpenId = idTypeModifyOpenId;
  }


  public AlipayOpenOperationOpenbizmockPatchQueryModel idTypea(String idTypea) {
    
    this.idTypea = idTypea;
    return this;
  }

   /**
   * id_type
   * @return idTypea
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "id_type", value = "id_type")

  public String getIdTypea() {
    return idTypea;
  }


  public void setIdTypea(String idTypea) {
    this.idTypea = idTypea;
  }


  public AlipayOpenOperationOpenbizmockPatchQueryModel price(String price) {
    
    this.price = price;
    return this;
  }

   /**
   * 元
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.21", value = "元")

  public String getPrice() {
    return price;
  }


  public void setPrice(String price) {
    this.price = price;
  }


  public AlipayOpenOperationOpenbizmockPatchQueryModel uida(String uida) {
    
    this.uida = uida;
    return this;
  }

   /**
   * 1
   * @return uida
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "1")

  public String getUida() {
    return uida;
  }


  public void setUida(String uida) {
    this.uida = uida;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AlipayOpenOperationOpenbizmockPatchQueryModel instance itself
   */
  public AlipayOpenOperationOpenbizmockPatchQueryModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlipayOpenOperationOpenbizmockPatchQueryModel alipayOpenOperationOpenbizmockPatchQueryModel = (AlipayOpenOperationOpenbizmockPatchQueryModel) o;
    return Objects.equals(this.cBody, alipayOpenOperationOpenbizmockPatchQueryModel.cBody) &&
        Objects.equals(this.complexA, alipayOpenOperationOpenbizmockPatchQueryModel.complexA) &&
        Objects.equals(this.complexB, alipayOpenOperationOpenbizmockPatchQueryModel.complexB) &&
        Objects.equals(this.complexC, alipayOpenOperationOpenbizmockPatchQueryModel.complexC) &&
        Objects.equals(this.complexD, alipayOpenOperationOpenbizmockPatchQueryModel.complexD) &&
        Objects.equals(this.idTypeModifyOpenId, alipayOpenOperationOpenbizmockPatchQueryModel.idTypeModifyOpenId) &&
        Objects.equals(this.idTypea, alipayOpenOperationOpenbizmockPatchQueryModel.idTypea) &&
        Objects.equals(this.price, alipayOpenOperationOpenbizmockPatchQueryModel.price) &&
        Objects.equals(this.uida, alipayOpenOperationOpenbizmockPatchQueryModel.uida)&&
        Objects.equals(this.additionalProperties, alipayOpenOperationOpenbizmockPatchQueryModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cBody, complexA, complexB, complexC, complexD, idTypeModifyOpenId, idTypea, price, uida, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlipayOpenOperationOpenbizmockPatchQueryModel {\n");
    sb.append("    cBody: ").append(toIndentedString(cBody)).append("\n");
    sb.append("    complexA: ").append(toIndentedString(complexA)).append("\n");
    sb.append("    complexB: ").append(toIndentedString(complexB)).append("\n");
    sb.append("    complexC: ").append(toIndentedString(complexC)).append("\n");
    sb.append("    complexD: ").append(toIndentedString(complexD)).append("\n");
    sb.append("    idTypeModifyOpenId: ").append(toIndentedString(idTypeModifyOpenId)).append("\n");
    sb.append("    idTypea: ").append(toIndentedString(idTypea)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    uida: ").append(toIndentedString(uida)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("c_body");
    openapiFields.add("complex_a");
    openapiFields.add("complex_b");
    openapiFields.add("complex_c");
    openapiFields.add("complex_d");
    openapiFields.add("id_type_modify_open_id");
    openapiFields.add("id_typea");
    openapiFields.add("price");
    openapiFields.add("uida");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AlipayOpenOperationOpenbizmockPatchQueryModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AlipayOpenOperationOpenbizmockPatchQueryModel.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlipayOpenOperationOpenbizmockPatchQueryModel is not found in the empty JSON string", AlipayOpenOperationOpenbizmockPatchQueryModel.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("c_body") != null && !jsonObj.get("c_body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `c_body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("c_body").toString()));
      }
      // validate the optional field `complex_a`
      if (jsonObj.getAsJsonObject("complex_a") != null) {
        TestDemo.validateJsonObject(jsonObj.getAsJsonObject("complex_a"));
      }
      // validate the optional field `complex_b`
      if (jsonObj.getAsJsonObject("complex_b") != null) {
        TestDemo.validateJsonObject(jsonObj.getAsJsonObject("complex_b"));
      }
      // validate the optional field `complex_c`
      if (jsonObj.getAsJsonObject("complex_c") != null) {
        TestDemoWzw.validateJsonObject(jsonObj.getAsJsonObject("complex_c"));
      }
      // validate the optional field `complex_d`
      if (jsonObj.getAsJsonObject("complex_d") != null) {
        TestDemoWzw.validateJsonObject(jsonObj.getAsJsonObject("complex_d"));
      }
      if (jsonObj.get("id_type_modify_open_id") != null && !jsonObj.get("id_type_modify_open_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_type_modify_open_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_type_modify_open_id").toString()));
      }
      if (jsonObj.get("id_typea") != null && !jsonObj.get("id_typea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_typea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_typea").toString()));
      }
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      if (jsonObj.get("uida") != null && !jsonObj.get("uida").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uida` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uida").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlipayOpenOperationOpenbizmockPatchQueryModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlipayOpenOperationOpenbizmockPatchQueryModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlipayOpenOperationOpenbizmockPatchQueryModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlipayOpenOperationOpenbizmockPatchQueryModel.class));

       return (TypeAdapter<T>) new TypeAdapter<AlipayOpenOperationOpenbizmockPatchQueryModel>() {
           @Override
           public void write(JsonWriter out, AlipayOpenOperationOpenbizmockPatchQueryModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AlipayOpenOperationOpenbizmockPatchQueryModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AlipayOpenOperationOpenbizmockPatchQueryModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlipayOpenOperationOpenbizmockPatchQueryModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlipayOpenOperationOpenbizmockPatchQueryModel
  * @throws IOException if the JSON string is invalid with respect to AlipayOpenOperationOpenbizmockPatchQueryModel
  */
  public static AlipayOpenOperationOpenbizmockPatchQueryModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlipayOpenOperationOpenbizmockPatchQueryModel.class);
  }

 /**
  * Convert an instance of AlipayOpenOperationOpenbizmockPatchQueryModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

