/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2024-01-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * SubMerchantCommonEnterOpenModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubMerchantCommonEnterOpenModel {
  public static final String SERIALIZED_NAME_EXTEND_FIELDS = "extend_fields";
  @SerializedName(SERIALIZED_NAME_EXTEND_FIELDS)
  private String extendFields;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "product_code";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private String productCode;

  public static final String SERIALIZED_NAME_S_SHORT_NAME = "s_short_name";
  @SerializedName(SERIALIZED_NAME_S_SHORT_NAME)
  private String sShortName;

  public SubMerchantCommonEnterOpenModel() { 
  }

  public SubMerchantCommonEnterOpenModel extendFields(String extendFields) {
    
    this.extendFields = extendFields;
    return this;
  }

   /**
   * 扩展字段，为json字符串格式；入驻支付即开票的产品该字段必填，用户白名单，由此字段传入；支付即开票商户配置维度，如果不传默认为SMID_MODE，目前仅支持SMID_MODE和PID_MODE
   * @return extendFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\\\\\"M_WHITE_LIST\\\\\":\\\\\"18997927882\\\\\", \\\\\"PAYMENT_OPEN_MERCHANT_DIMENSION\\\\\": \\\\\"PID_MODE\\\\\"}", value = "扩展字段，为json字符串格式；入驻支付即开票的产品该字段必填，用户白名单，由此字段传入；支付即开票商户配置维度，如果不传默认为SMID_MODE，目前仅支持SMID_MODE和PID_MODE")

  public String getExtendFields() {
    return extendFields;
  }


  public void setExtendFields(String extendFields) {
    this.extendFields = extendFields;
  }


  public SubMerchantCommonEnterOpenModel productCode(String productCode) {
    
    this.productCode = productCode;
    return this;
  }

   /**
   * 商户门店入驻的产品码,STANDARD_INVOICE:扫码开票，INVOICE_RETURN:企业自建-发票回传，INVOICE_EXPENSE:发票报销，PAYMENT_OPEN:支付即开票，PAY_FEE_OPEN:缴费后开票。
   * @return productCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "STANDARD_INVOICE", value = "商户门店入驻的产品码,STANDARD_INVOICE:扫码开票，INVOICE_RETURN:企业自建-发票回传，INVOICE_EXPENSE:发票报销，PAYMENT_OPEN:支付即开票，PAY_FEE_OPEN:缴费后开票。")

  public String getProductCode() {
    return productCode;
  }


  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }


  public SubMerchantCommonEnterOpenModel sShortName(String sShortName) {
    
    this.sShortName = sShortName;
    return this;
  }

   /**
   * 商户门店所属的服务方简称。
   * @return sShortName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SAD", value = "商户门店所属的服务方简称。")

  public String getsShortName() {
    return sShortName;
  }


  public void setsShortName(String sShortName) {
    this.sShortName = sShortName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubMerchantCommonEnterOpenModel subMerchantCommonEnterOpenModel = (SubMerchantCommonEnterOpenModel) o;
    return Objects.equals(this.extendFields, subMerchantCommonEnterOpenModel.extendFields) &&
        Objects.equals(this.productCode, subMerchantCommonEnterOpenModel.productCode) &&
        Objects.equals(this.sShortName, subMerchantCommonEnterOpenModel.sShortName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extendFields, productCode, sShortName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubMerchantCommonEnterOpenModel {\n");
    sb.append("    extendFields: ").append(toIndentedString(extendFields)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    sShortName: ").append(toIndentedString(sShortName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extend_fields");
    openapiFields.add("product_code");
    openapiFields.add("s_short_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SubMerchantCommonEnterOpenModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SubMerchantCommonEnterOpenModel.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubMerchantCommonEnterOpenModel is not found in the empty JSON string", SubMerchantCommonEnterOpenModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SubMerchantCommonEnterOpenModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubMerchantCommonEnterOpenModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("extend_fields") != null && !jsonObj.get("extend_fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extend_fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extend_fields").toString()));
      }
      if (jsonObj.get("product_code") != null && !jsonObj.get("product_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_code").toString()));
      }
      if (jsonObj.get("s_short_name") != null && !jsonObj.get("s_short_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s_short_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s_short_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubMerchantCommonEnterOpenModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubMerchantCommonEnterOpenModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubMerchantCommonEnterOpenModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubMerchantCommonEnterOpenModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SubMerchantCommonEnterOpenModel>() {
           @Override
           public void write(JsonWriter out, SubMerchantCommonEnterOpenModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubMerchantCommonEnterOpenModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SubMerchantCommonEnterOpenModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SubMerchantCommonEnterOpenModel
  * @throws IOException if the JSON string is invalid with respect to SubMerchantCommonEnterOpenModel
  */
  public static SubMerchantCommonEnterOpenModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubMerchantCommonEnterOpenModel.class);
  }

 /**
  * Convert an instance of SubMerchantCommonEnterOpenModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

