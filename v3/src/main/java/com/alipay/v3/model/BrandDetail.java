/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-08-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * BrandDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BrandDetail {
  public static final String SERIALIZED_NAME_BLOCK_TYPE = "block_type";
  @SerializedName(SERIALIZED_NAME_BLOCK_TYPE)
  private String blockType;

  public static final String SERIALIZED_NAME_BOX_VERSION = "box_version";
  @SerializedName(SERIALIZED_NAME_BOX_VERSION)
  private String boxVersion;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_IMG = "img";
  @SerializedName(SERIALIZED_NAME_IMG)
  private String img;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_MATERIAL_ID = "material_id";
  @SerializedName(SERIALIZED_NAME_MATERIAL_ID)
  private String materialId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLIC_BIND_APP_ID = "public_bind_app_id";
  @SerializedName(SERIALIZED_NAME_PUBLIC_BIND_APP_ID)
  private String publicBindAppId;

  public static final String SERIALIZED_NAME_SERVICE_CODE = "service_code";
  @SerializedName(SERIALIZED_NAME_SERVICE_CODE)
  private String serviceCode;

  public BrandDetail() { 
  }

  public BrandDetail blockType(String blockType) {
    
    this.blockType = blockType;
    return this;
  }

   /**
   * 搜索工单详情数据block_type
   * @return blockType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TINYAPP", value = "搜索工单详情数据block_type")

  public String getBlockType() {
    return blockType;
  }


  public void setBlockType(String blockType) {
    this.blockType = blockType;
  }


  public BrandDetail boxVersion(String boxVersion) {
    
    this.boxVersion = boxVersion;
    return this;
  }

   /**
   * 版本号
   * @return boxVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.0", value = "版本号")

  public String getBoxVersion() {
    return boxVersion;
  }


  public void setBoxVersion(String boxVersion) {
    this.boxVersion = boxVersion;
  }


  public BrandDetail desc(String desc) {
    
    this.desc = desc;
    return this;
  }

   /**
   * 描述信息
   * @return desc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "描述信息", value = "描述信息")

  public String getDesc() {
    return desc;
  }


  public void setDesc(String desc) {
    this.desc = desc;
  }


  public BrandDetail img(String img) {
    
    this.img = img;
    return this;
  }

   /**
   * img地址
   * @return img
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://mdn.alipayobjects.com/mrch_spc/afts/img/A*vQG7Q5nUbWwAAAAAAAAAAAAADsF1AQ/original", value = "img地址")

  public String getImg() {
    return img;
  }


  public void setImg(String img) {
    this.img = img;
  }


  public BrandDetail index(String index) {
    
    this.index = index;
    return this;
  }

   /**
   * 索引信息
   * @return index
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "索引信息")

  public String getIndex() {
    return index;
  }


  public void setIndex(String index) {
    this.index = index;
  }


  public BrandDetail key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * 工单详情数据key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "425d8560-35da-11eb-9de8-217f5d8e3c76", value = "工单详情数据key")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public BrandDetail materialId(String materialId) {
    
    this.materialId = materialId;
    return this;
  }

   /**
   * 工单详情数据material_id
   * @return materialId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SM2020120401367242", value = "工单详情数据material_id")

  public String getMaterialId() {
    return materialId;
  }


  public void setMaterialId(String materialId) {
    this.materialId = materialId;
  }


  public BrandDetail name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * 应用名称
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "测试1", value = "应用名称")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public BrandDetail publicBindAppId(String publicBindAppId) {
    
    this.publicBindAppId = publicBindAppId;
    return this;
  }

   /**
   * 搜索运营工单详情数据public_bind_app_id
   * @return publicBindAppId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "111", value = "搜索运营工单详情数据public_bind_app_id")

  public String getPublicBindAppId() {
    return publicBindAppId;
  }


  public void setPublicBindAppId(String publicBindAppId) {
    this.publicBindAppId = publicBindAppId;
  }


  public BrandDetail serviceCode(String serviceCode) {
    
    this.serviceCode = serviceCode;
    return this;
  }

   /**
   * 服务码
   * @return serviceCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020081121000352488483", value = "服务码")

  public String getServiceCode() {
    return serviceCode;
  }


  public void setServiceCode(String serviceCode) {
    this.serviceCode = serviceCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BrandDetail instance itself
   */
  public BrandDetail putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrandDetail brandDetail = (BrandDetail) o;
    return Objects.equals(this.blockType, brandDetail.blockType) &&
        Objects.equals(this.boxVersion, brandDetail.boxVersion) &&
        Objects.equals(this.desc, brandDetail.desc) &&
        Objects.equals(this.img, brandDetail.img) &&
        Objects.equals(this.index, brandDetail.index) &&
        Objects.equals(this.key, brandDetail.key) &&
        Objects.equals(this.materialId, brandDetail.materialId) &&
        Objects.equals(this.name, brandDetail.name) &&
        Objects.equals(this.publicBindAppId, brandDetail.publicBindAppId) &&
        Objects.equals(this.serviceCode, brandDetail.serviceCode)&&
        Objects.equals(this.additionalProperties, brandDetail.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockType, boxVersion, desc, img, index, key, materialId, name, publicBindAppId, serviceCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrandDetail {\n");
    sb.append("    blockType: ").append(toIndentedString(blockType)).append("\n");
    sb.append("    boxVersion: ").append(toIndentedString(boxVersion)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    img: ").append(toIndentedString(img)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    materialId: ").append(toIndentedString(materialId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publicBindAppId: ").append(toIndentedString(publicBindAppId)).append("\n");
    sb.append("    serviceCode: ").append(toIndentedString(serviceCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block_type");
    openapiFields.add("box_version");
    openapiFields.add("desc");
    openapiFields.add("img");
    openapiFields.add("index");
    openapiFields.add("key");
    openapiFields.add("material_id");
    openapiFields.add("name");
    openapiFields.add("public_bind_app_id");
    openapiFields.add("service_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BrandDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BrandDetail.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrandDetail is not found in the empty JSON string", BrandDetail.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("block_type") != null && !jsonObj.get("block_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block_type").toString()));
      }
      if (jsonObj.get("box_version") != null && !jsonObj.get("box_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `box_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("box_version").toString()));
      }
      if (jsonObj.get("desc") != null && !jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if (jsonObj.get("img") != null && !jsonObj.get("img").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `img` to be a primitive type in the JSON string but got `%s`", jsonObj.get("img").toString()));
      }
      if (jsonObj.get("index") != null && !jsonObj.get("index").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `index` to be a primitive type in the JSON string but got `%s`", jsonObj.get("index").toString()));
      }
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (jsonObj.get("material_id") != null && !jsonObj.get("material_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `material_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("material_id").toString()));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("public_bind_app_id") != null && !jsonObj.get("public_bind_app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_bind_app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_bind_app_id").toString()));
      }
      if (jsonObj.get("service_code") != null && !jsonObj.get("service_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrandDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrandDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrandDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrandDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<BrandDetail>() {
           @Override
           public void write(JsonWriter out, BrandDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BrandDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BrandDetail instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BrandDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BrandDetail
  * @throws IOException if the JSON string is invalid with respect to BrandDetail
  */
  public static BrandDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrandDetail.class);
  }

 /**
  * Convert an instance of BrandDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

